---
title: "Análisis bayesiano de de partidos de fútbol"
subtitle: "Proyecto MLG"
format: pdf
editor: visual
authors: 
  - "Blanca Garcia - 118886"
  - "Yuneri Perez - 199813"
  - "Thomas Rudolf - 169293"
  - "Mariano Villafuerte - 156057"
toc: true
toc-title: "Índice"
---

```{r setup, include=FALSE}
#knitr::opts_knit$set(root.dir = "../Proyecto MLG/data")
```

```{r librerias, include=FALSE, cache=TRUE}
library(tidyverse)
library(gt)
library(dplyr)
library(readr)
library(R2jags)
library(coda)
library(mcmcplots)
library(stringr)
library(plyr)
library(xtable)
library(rstan)
library(rstantools)
library(bayesplot)
```

\newpage

## Anexo 8 - Modelo Dimánico

## Abstract

Football (soccer) is one of the most popular sports - maybe the most popular. In this paper a dynamic linear model is developed that tries to predict the outcome of a football match based on former results. Therefore, previous seasons are analysed and the current standings of the season are used to predict the result future games. The model is based on the attack abilities and defend abilities of each team when it plays at home or away. The model is tested for three teams: Liverpool FC, Manchester City and Arsenal. The outcome results very optimistic since number of goals are higher than the real result. However, the outcome of wins or looses are coherent.

\newpage

```{r datos, warning=FALSE, echo=FALSE, cache=TRUE}
E0 <- read_csv("E0.csv")
E0<- E0 |>  mutate(Season = "2023-2024")
E01 <- read_csv("E0 (1).csv", show_col_types = FALSE)
E01<- E01 |>  mutate(Season = "2022-2023")
E02 <- read_csv("E0 (2).csv", show_col_types = FALSE)
E02<- E02 |>  mutate(Season = "2021-2022")
E03 <- read_csv("E0 (3).csv", show_col_types = FALSE)
E03<- E03 |>  mutate(Season = "2020-2021")
E04 <- read_csv("E0 (4).csv", show_col_types = FALSE)
E04<- E04 |>  mutate(Season = "2019-2020")
E05 <- read_csv("E0 (5).csv", show_col_types = FALSE)
E05<- E05 |>  mutate(Season = "2018-2019")
E06 <- read_csv("E0 (6).csv", show_col_types = FALSE)
E06<- E06 |>  mutate(Season = "2017-2018")
E07 <- read_csv("E0 (7).csv", show_col_types = FALSE)
E07<- E07 |>  mutate(Season = "2016-2017")
E08 <- read_csv("E0 (8).csv", show_col_types = FALSE)
E08<- E08 |>  mutate(Season = "2015-2016")
E09 <- read_csv("E0 (9).csv", show_col_types = FALSE)
E09<- E09 |>  mutate(Season = "2014-2015")
E010 <- read_csv("E0 (10).csv", show_col_types = FALSE)
E010<- E010 |>  mutate(Season = "2013-2014")
E011 <- read_csv("E0 (11).csv", show_col_types = FALSE)
E011<- E011 |>  mutate(Season = "2012-2013")
E012 <- read_csv("E0 (12).csv", show_col_types = FALSE)
E012<- E012 |>  mutate(Season = "2011-2012")
E013 <- read_csv("E0 (13).csv", show_col_types = FALSE)
E013<- E013 |>  mutate(Season = "2010-2011")

# Unir todos los dataframes
dataPL_complete <- bind_rows(E013, E012, E011, E010, E09, E08, E07, E06, E05, E04, E03, E02, E01, E0)

# Verificar el resultado
# head(dataPL_complete)
# dataPL_complete[1:10, ] |> gt()
```

# Datos y Objectivo

El objetivo del presente análisis no es sólo modelar el resultados de los partidos en el conjunto de datos, sino también ser capaz de: a) calcular las probabilidades del posible resultado de goles en los partidos futuros y b) producir una clasificación confiable de los equipos. Lo antreior a partir del desarrollo de un **modelo dinámico bayesiano**, donde los resultados de los goles se supone que se distribuyen de acuerdo con una distribución de Poisson. Los datos son los mismos que en el analisis del **modelo jequarico bayesiano**, visto anteriormente.

```{r preprocessing all data, echo=FALSE, cache=TRUE}
dataPL <- dataPL_complete |>
  select(Div, Season, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR) |>
  mutate(Date = as.Date(Date, format = "%d/%m/%Y"),
         YearMatch = format(Date, "%Y"),
         MonthMatch = format(Date, "%m"),
         DayMatch = format(Date, "%d")) |>
  dplyr::rename(HomeGoals = FTHG, 
                AwayGoals = FTAG, 
                Result = FTR)

# -1 = Away win, 0 = Draw, 1 = Home win
dataPL$MatchResult <- sign(dataPL$HomeGoals - dataPL$AwayGoals)
# difference in goals form HOME team point of view. Negative values mean lost game

dataPL$MatchGoalDiff <- dataPL$HomeGoals - dataPL$AwayGoals
# Creating a data frame d with only the complete match results
d <- na.omit(dataPL)
teams <- unique(c(d$HomeTeam, d$AwayTeam))
seasons <- unique(d$Season)


# A list for JAGS with the data from d where the strings are coded as
# integers
data_list <- list(HomeGoals = d$HomeGoals, AwayGoals = d$AwayGoals,
HomeTeam = as.numeric(factor(d$HomeTeam, levels = teams)),
AwayTeam = as.numeric(factor(d$AwayTeam, levels = teams)),
Season = as.numeric(factor(d$Season, levels = seasons)), n_teams = length(teams),
n_games = nrow(d), n_seasons = length(seasons))

# Convenience function to generate the type of column names Jags outputs.
col_name <- function(name, ...) {
paste0(name, "[", paste(..., sep = ","), "]")
}
```

\newpage

# Métodos - Modelo Dimanico

(basado en "Dynamic Bayesian forecasting models of football match outcomes with estimation of the evolution variance parameter" de Alun Owen) \newline En base de los datos de la Premier League y a partir del paper de Alun Owen se desarrollo de un **modelo dinámico**. En la siguente grafica se ve la media de los goles que lograron cada equipo de los ultimos 10 años y si varianza en casa (azul) y afuera (rojo).

```{r all seasons, echo = FALSE, warning=FALSE, cache=TRUE}
library(patchwork)
df_2_analyse <- d
df_2_analyse.summeryHome <- aggregate(HomeGoals ~ HomeTeam, 
                                      data = df_2_analyse, 
                                      function(x) c(mGoals = mean(x),
                                                    q1Goals = quantile(x, c(0.025)),
                                                    q2Goals = quantile(x, c(0.975)), 
                                                    sdGoals = sd(x)))
df_2_analyse.summeryAway <- aggregate(AwayGoals ~ AwayTeam, 
                                      data = df_2_analyse, 
                                      function(x) c(mGoals = mean(x),
                                                    q1Goals = quantile(x, c(0.025)),
                                                    q2Goals = quantile(x, c(0.975)), 
                                                    sdGoals = sd(x)))

df_2_analyse.summeryHome <- df_2_analyse.summeryHome |>  
  arrange(desc(HomeGoals[,1]))
df_2_analyse.summeryAway <- df_2_analyse.summeryAway |>  
  arrange(desc(AwayGoals[,1]))

g_H_10s <- ggplot(df_2_analyse.summeryHome, 
              aes(x=HomeGoals[,1], y = HomeTeam, 
                  xmin=HomeGoals[,2], xmax = HomeGoals[,3]))+
  geom_point() +
  geom_pointrange(colour = "blue")

g_A_10s <- ggplot(df_2_analyse.summeryAway, 
              aes(x=AwayGoals[,1], y = AwayTeam, 
                  xmin=AwayGoals[,2], xmax = AwayGoals[,3]))+
  geom_point() +
  geom_pointrange(colour = "red")

g_H_10s + g_A_10s
```

Para este modelo, se uso solamente la ultima temporada 2023-2024 y la temporada anterior para definir algunos variables iniciales.

```{r preprocesing E0 current season, echo=FALSE, warning=FALSE, cache=TRUE}

dataPL_E0 <- E0
dataPL_E0 <- dataPL_E0 |>
  select(Div, Season, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR) |>
  mutate(Date = as.Date(Date, format = "%d/%m/%Y"),
         YearMatch = format(Date, "%Y"),
         MonthMatch = format(Date, "%m"),
         DayMatch = format(Date, "%d")) |>
  dplyr::rename(HomeGoals = FTHG, 
                AwayGoals = FTAG, 
                Result = FTR)

# -1 = Away win, 0 = Draw, 1 = Home win
dataPL_E0$MatchResult <- sign(dataPL_E0$HomeGoals - dataPL_E0$AwayGoals)
# difference in goals form HOME team point of view. Negative values mean lost game

dataPL_E0$MatchGoalDiff <- dataPL_E0$HomeGoals - dataPL_E0$AwayGoals
# Creating a data frame d with only the complete match results
df_2_analyse <- na.omit(dataPL_E0)
#
teams <- unique(c(df_2_analyse$HomeTeam, df_2_analyse$AwayTeam))
n_teams <- length(unique(teams))
seasons <- unique(d$Season)
```

La siguente gráfica nuevamente señala la media de los goles que cada equipo logro, en casa (azul) y de visita (rojo). Se nota que los equipos tienen un desempeño parecido, no hay ninguno que mete significativamente mas goles que otros. Equipos, como Manchester City, Liverpool o Arsenal tienen ligeramente mas goles.

```{r plots all teams current season, echo=FALSE, warning=FALSE, cache=TRUE}
df_2_analyse.summeryHome <- aggregate(HomeGoals ~ HomeTeam, 
                                      data = df_2_analyse, 
                                      function(x) c(mGoals = mean(x),
                                                    q1Goals = quantile(x, c(0.025)),
                                                    q2Goals = quantile(x, c(0.975)), 
                                                    sdGoals = sd(x)))
df_2_analyse.summeryAway <- aggregate(AwayGoals ~ AwayTeam, 
                                      data = df_2_analyse, 
                                      function(x) c(mGoals = mean(x),
                                                    q1Goals = quantile(x, c(0.025)),
                                                    q2Goals = quantile(x, c(0.975)), 
                                                    sdGoals = sd(x)))
df_2_analyse.summeryHome <- df_2_analyse.summeryHome |>  
  arrange(desc(HomeGoals[,1]))
df_2_analyse.summeryAway <- df_2_analyse.summeryAway |>  
  arrange(desc(AwayGoals[,1]))

g_H <- ggplot(df_2_analyse.summeryHome, 
              aes(x=HomeGoals[,1], y = HomeTeam, 
                  xmin=HomeGoals[,2], xmax = HomeGoals[,3]))+
  geom_point() +
  geom_pointrange(colour = "blue")

g_A <- ggplot(df_2_analyse.summeryAway, 
              aes(x=AwayGoals[,1], y = AwayTeam, 
                  xmin=AwayGoals[,2], xmax = AwayGoals[,3]))+
  geom_point() +
  geom_pointrange(colour = "red")
library(patchwork)
g_H + g_A

df_2_analyse.summeryAway1 <- df_2_analyse |> 
  group_by(AwayTeam) |>
  summarise(mGoals= mean(AwayGoals))


```

```{r doing a summary, echo=FALSE,warning=TRUE, cache=TRUE}
AllHomeGoals <- sum(df_2_analyse$HomeGoals)
AllAwayGoals <- sum(df_2_analyse$AwayGoals)
df_2_analyse <- df_2_analyse |> group_by(HomeTeam) |> mutate(alfa= sum(HomeGoals))
```

El objetivo es predecir cuantos goles logran cada equipo en un partido y en base de eso predecir quien gane. Para eso, se define una función que extrae datos del conjunto:

-   partidos en casa partidos

-   goles en casa

-   goles de vista

-   la habilidad de defender

-   la habilidad de atacar

-   si el primer partido de la temporada fue en casa o no.

```{r preprocesing E0 and specific team, echo=FALSE, warning=FALSE, cache=TRUE}
team_statistics<- function(Team, first_day_away, df, prev_season){
  tstatistics <- NULL
  team_to_predict <- Team
  first_day_home <- abs(first_day_away-1)
  # find matchday for team to predict
  match_days_H <- length(df$HomeTeam[df$HomeTeam==team_to_predict])
  match_days_A <- length(df$AwayTeam[df$AwayTeam==team_to_predict])
  # save it for the output
  tstatistics$match_days_H = match_days_H
  tstatistics$match_days_A = match_days_A
  # home goals made so far
  home_goals_team_to_predict <- df$HomeGoals[df$HomeTeam==team_to_predict]
  # match day vector: generally a team plays one week at home, the other week away. If the team starts at home, first_day_away = 0, otherwise 1  
  match_day_vector_H <- seq(1, match_days_H*2, 2) + first_day_away
  input_vec_H <- c(home_goals_team_to_predict, match_day_vector_H )
  # away goals made so far
  away_goals_team_to_predict <- df$AwayGoals[df$AwayTeam==team_to_predict]
  # same logic as for home matches
  match_day_vector_A <- seq(1, match_days_A*2, 2)  + first_day_home 
  input_vec_A <- c(away_goals_team_to_predict, match_day_vector_A )
  # save it for the output
  tstatistics$match_day_vector_H <- match_day_vector_H
  tstatistics$match_day_vector_A <- match_day_vector_A

  # generate the home goals matrix
  home_goals_at_match_day_matrix <- matrix(input_vec_H, nrow = length(home_goals_team_to_predict))
  # save it for the output
  tstatistics$home_goals_at_match_day_matrix <- home_goals_at_match_day_matrix
  # generate the away goals matrix
  away_goals_at_match_day_matrix <- matrix(input_vec_A, nrow = length(away_goals_team_to_predict))
  # save it for the output
  tstatistics$away_goals_at_match_day_matrix <- away_goals_at_match_day_matrix
  # average scoring at home form last season:
  ma_last_season <- mean(prev_season$FTHG[prev_season$HomeTeam==team_to_predict])
  mai <- (c(ma_last_season, home_goals_team_to_predict ))
  mai <- cumsum(mai)/seq(1,length(mai), 1)
  # save it for the output
  tstatistics$mai <-mai
  # average scoring at away form last season:
  mb_last_season <- mean(prev_season$FTAG[prev_season$AwayTeam==team_to_predict])
  mbi <- (c(mb_last_season, away_goals_team_to_predict ))
  mbi <- cumsum(mbi)/seq(1,length(mbi), 1)
  # save it for the output
  tstatistics$mbi <- mbi
  tstatistics$q1_A <- quantile(df$MatchGoalDiff[df$AwayTeam==team_to_predict], 0.025)
  tstatistics$q2_A <- quantile(df$MatchGoalDiff[df$AwayTeam==team_to_predict], 0.975)
  tstatistics$q1_H <- quantile(df$MatchGoalDiff[df$HomeTeam==team_to_predict], 0.025)
  tstatistics$q2_H <- quantile(df$MatchGoalDiff[df$HomeTeam==team_to_predict], 0.975)
  tstatistics$average_diff_goals_A <- mean(df$MatchGoalDiff[df$AwayTeam==team_to_predict])
  tstatistics$average_diff_goals_H <- mean(df$MatchGoalDiff[df$HomeTeam==team_to_predict])
  # defense abilities (using goals recieved)
  goals_recieved_at_home <-df$AwayGoals[df$HomeTeam==team_to_predict]

  tstatistics$defense_abilities_at_home <- -cumsum(goals_recieved_at_home)/seq(1,length(goals_recieved_at_home), 1) 
  goals_recieved_away <-df$HomeGoals[df$AwayTeam==team_to_predict]
  tstatistics$defense_abilities_away <- -cumsum(goals_recieved_away)/seq(1,length(goals_recieved_away), 1) 
  
  # attack abilities (using goals made)
  goals_made_at_home <-df$HomeGoals[df$HomeTeam==team_to_predict]
  tstatistics$attack_abilities_at_home <- cumsum(goals_made_at_home)/seq(1,length(goals_made_at_home), 1) 
  goals_made_away <-df$AwayGoals[df$AwayTeam==team_to_predict]
  tstatistics$attack_abilities_away <- cumsum(goals_made_away)/seq(1,length(goals_made_away), 1) 

  return(tstatistics)
}
```

Esta tabla se ve los primeros partidos de semana 1.

```{r 1st match days, echo=FALSE, warning=FALSE, cache=TRUE}
match_matrix <- data.frame(Home = df_2_analyse$HomeTeam, 
                           Away = df_2_analyse$AwayTeam)
head(match_matrix, 10)
df_teams <- data.frame(teams = c(match_matrix$Home[1:10], match_matrix$Away[1:10]), 
                       first_day_away = c(rep(0, 10), rep(1, 10)))

  

```

Esta información se puede genera para cualquier equipo, se aplico para *Liverpool*, *Manchester City, Tottemham, Cristal Place y Arsenal, Manchester United, Fullham y Aston Villa.* La gráfica señala la media de la differencia en goles en casa (izquiera) y afuera (derecha) de Arsenal, Manchester City y Liverpool, los tres equipos que actualmente están competiendo por el campionato de la Premier League (al momento de implementarlo). Los valores de "visita" salen negativos porque se calcula la diferencia entre *casa* y *vista*. Como son los equipos mas exitos acutalmente, consiguen mas goles en juegos afuera que sus oponentes.

```{r statistics for some teams, warning=FALSE, echo=FALSE, cache=TRUE}

statistics_Liverpool <- team_statistics("Liverpool", 1, df_2_analyse, E01)
statistics_CrystalPalace <- team_statistics("Crystal Palace", 1, df_2_analyse, E01)
statistics_Tottenham <-team_statistics("Tottenham", 1, df_2_analyse, E01)
statistics_ManCity <-team_statistics("Man City", 1, df_2_analyse, E01)
statistics_Arsenal <-team_statistics("Arsenal", 0, df_2_analyse, E01)
statistics_AV <-team_statistics("Aston Villa", 1, df_2_analyse, E01)
statistics_ManU <-team_statistics("Man United", 1, df_2_analyse, E01)
statistics_FH <-team_statistics("Fulham", 1, df_2_analyse, E01)
```

```{r plot the current season results in diffence in goals home and away, warning=FALSE, echo=FALSE, cache=TRUE}
  
df_current_season <- data.frame(
  goal_diff_MC_q_H = c(statistics_ManCity$q1_H,statistics_ManCity$q2_H ), 
  goal_diff_MC_m_H = statistics_ManCity$average_diff_goals_H, 
  goal_diff_MC_q_A = c(statistics_ManCity$q1_A,statistics_ManCity$q2_A ), 
  goal_diff_MC_m_A = statistics_ManCity$average_diff_goals_A,
  goal_diff_Ar_q_H = c(statistics_Arsenal$q1_H,statistics_Arsenal$q2_H ), 
  goal_diff_Ar_m_H = statistics_Arsenal$average_diff_goals_H, 
  goal_diff_Ar_q_A = c(statistics_Arsenal$q1_A,statistics_Arsenal$q2_A ), 
  goal_diff_Ar_m_A = statistics_Arsenal$average_diff_goals_A,
  goal_diff_Li_q_H = c(statistics_Liverpool$q1_H,statistics_Liverpool$q2_H ), 
  goal_diff_Li_m_H = statistics_Liverpool$average_diff_goals_H, 
  goal_diff_Li_q_A = c(statistics_Liverpool$q1_A,statistics_Arsenal$q2_A ), 
  goal_diff_Li_m_A = statistics_Liverpool$average_diff_goals_A

  )  


g_H_E0 <- ggplot(df_current_season) +
       geom_line(aes(x=c("Man City", "Man City"), y=c(goal_diff_MC_q_H[1], goal_diff_MC_q_H[2]))) +
  geom_point(aes(x="Man City", y= goal_diff_MC_m_H), size=5, color="skyblue")+
         geom_line(aes(x=c("Liverpool", "Liverpool"), y=c(goal_diff_Li_q_H[1], goal_diff_Li_q_H[2]))) +
  geom_point(aes(x="Liverpool", y= goal_diff_Li_m_H), size=5, color="red")+
  geom_line(aes(x=c("Arsenal", "Arsenal"), y=c(goal_diff_Ar_q_H[1], goal_diff_Ar_q_H[2]))) +
  geom_point(aes(x="Arsenal", y= goal_diff_Ar_m_H), size=5, color="darkred")+
  labs(x="Teams", y="intervals", title = "95% confidence intervals for Teams \n over la last season \n (diff. in goals for home matches)") +
  theme(plot.title = element_text(hjust=0.5))


g_A_E0 <- ggplot(df_current_season) +
       geom_line(aes(x=c("Man City", "Man City"), y=c(goal_diff_MC_q_A[1], goal_diff_MC_q_A[2]))) +
  geom_point(aes(x="Man City", y= goal_diff_MC_m_A), size=5, color="skyblue")+
         geom_line(aes(x=c("Liverpool", "Liverpool"), y=c(goal_diff_Li_q_A[1], goal_diff_Li_q_A[2]))) +
  geom_point(aes(x="Liverpool", y= goal_diff_Li_m_A), size=5, color="red")+
  geom_line(aes(x=c("Arenal", "Arenal"), y=c(goal_diff_Ar_q_A[1], goal_diff_Ar_q_A[2]))) +
  geom_point(aes(x="Arenal", y= goal_diff_Ar_m_A), size=5, color="darkred")+
  labs(x="Teams", y="intervals", title = "95% confidence intervals for Teams \n over la last season \n (diff. in goals for away matches)") +
  theme(plot.title = element_text(hjust=0.5))
g_H_E0  + g_A_E0 

## prep data for table print
# Liverpool
Liverpool <- c(df_current_season$goal_diff_Li_m_H, 
               df_current_season$goal_diff_Li_m_A) 

# Manchester City
ManCity <- c(df_current_season$goal_diff_MC_m_H, 
              df_current_season$goal_diff_MC_m_A)

# Arsenal
Arsenal <- c(df_current_season$goal_diff_Ar_m_H, 
               df_current_season$goal_diff_Ar_m_A)

df_print <- data.frame(Liverpool, ManCity, Arsenal)
```

```{r prep data for stan model Fulham vs Man City, warning=FALSE, echo=FALSE, cache=TRUE}


# select and prepare data for STAN model (Liverpool vs Man City):
last_day_MC_FH <- min(length(statistics_ManCity$mai),
                length(statistics_ManCity$mbi),
                length(statistics_FH$mai),
                length(statistics_FH$mbi),
                length(statistics_FH$home_goals_at_match_day_matrix[, 1]),
                length(statistics_ManCity$away_goals_at_match_day_matrix[, 1]))

dataPL_E0_stan_MC_FH <- list(n=n_teams-2, # number of teams 
               N= min(length(statistics_ManCity$match_day_vector_A),
                      length(statistics_FH$match_day_vector_H)), # number of data points
               T=min(statistics_FH$match_days_H, statistics_ManCity$match_days_A) , # number of matches played
               Xi=statistics_FH$home_goals_at_match_day_matrix[1:last_day_MC_FH,],# number of goals at home
               Yi=statistics_ManCity$away_goals_at_match_day_matrix[1:last_day_MC_FH,], # number of goals away
               maH = statistics_FH$attack_abilities_at_home[1:last_day_MC_FH],#$mai[1:last_day], 
               mbH = statistics_FH$defense_abilities_at_home[1:last_day_MC_FH],#$mbi[1:last_day],
               maA = statistics_ManCity$attack_abilities_away[1:last_day_MC_FH],#$mai[1:last_day], 
               mbA = statistics_ManCity$defense_abilities_away[1:last_day_MC_FH]#$mbi[1:last_day]
 )
```

```{r prep data for stan model ManUnited vs Arsenal, echo=FALSE, warning=FALSE, cache=TRUE}

# select and prepare data for STAN model (Liverpool vs Arsenal):
last_day_Ar_ManU <- min(length(statistics_Arsenal$mai),
                length(statistics_Arsenal$mbi),
                length(statistics_ManU$mai),
                length(statistics_ManU$mbi),
                length(statistics_ManU$home_goals_at_match_day_matrix[, 1]),
                length(statistics_Arsenal$away_goals_at_match_day_matrix[, 1]))

dataPL_E0_stan_Ar_ManU <- list(n=n_teams-2, # number of teams 
               N= min(length(statistics_Arsenal$match_day_vector_A),
                      length(statistics_ManU$match_day_vector_H)), # number of data points
               T=min(statistics_ManU$match_days_H, statistics_Arsenal$match_days_A) , # number of matches played
               Xi=statistics_ManU$home_goals_at_match_day_matrix[1:last_day_Ar_ManU,],# number of goals at home
               Yi=statistics_Arsenal$away_goals_at_match_day_matrix[1:last_day_Ar_ManU,], # number of goals away
               maH = statistics_ManU$attack_abilities_at_home[1:last_day_Ar_ManU],#$mai[1:last_day], 
               mbH = statistics_ManU$defense_abilities_at_home[1:last_day_Ar_ManU],#$mbi[1:last_day],
               maA = statistics_Arsenal$attack_abilities_away[1:last_day_Ar_ManU],#$mai[1:last_day], 
               mbA = statistics_Arsenal$defense_abilities_away[1:last_day_Ar_ManU]#$mbi[1:last_day]
 )
```

```{r prep data for stan model Aston Villa vs Liverpool, echo=FALSE, warning=FALSE, cache=TRUE}

# select and prepare data for STAN model (Liverpool vs Arsenal):
last_day_AV_Liv <- min(length(statistics_AV$mai),
                length(statistics_AV$mbi),
                length(statistics_Liverpool$mai),
                length(statistics_Liverpool$mbi),
                length(statistics_Liverpool$home_goals_at_match_day_matrix[, 1]),
                length(statistics_AV$away_goals_at_match_day_matrix[, 1]))

dataPL_E0_stan_AV_Liv <- list(n=n_teams-2, # number of teams 
               N= min(length(statistics_Liverpool$match_day_vector_A),
                      length(statistics_AV$match_day_vector_H)), # number of data points
               T=min(statistics_AV$match_days_H, statistics_Arsenal$match_days_A) , # number of matches played
               Xi=statistics_AV$home_goals_at_match_day_matrix[1:last_day_AV_Liv,],# number of goals at home
               Yi=statistics_Liverpool$away_goals_at_match_day_matrix[1:last_day_AV_Liv,], # number of goals away
               maH = statistics_AV$attack_abilities_at_home[1:last_day_AV_Liv],#$mai[1:last_day], 
               mbH = statistics_AV$defense_abilities_at_home[1:last_day_AV_Liv],#$mbi[1:last_day],
               maA = statistics_Liverpool$attack_abilities_away[1:last_day_AV_Liv],#$mai[1:last_day], 
               mbA = statistics_Liverpool$defense_abilities_away[1:last_day_AV_Liv]#$mbi[1:last_day]
)
 
```

\newpage

## Modelo

En este caso, se supone que la distribución de meter goles es una poisson (igual en los modelos anteriores). Los indices $i, j, t$ representan el equipo de casa $X$, el equipo de visitante $Y$ y el día del torneo que se juega.

$$
X_{i, j,t} \sim Poi(\mu_{i, j, t})
$$ $$ 
Y_{i, j,t} ~ Poi(\lambda_{i, j,t})
$$ Los parametros $\mu$ y $\lambda$ representan e la media de que ocurre un gol en casa o de visita, respectivamente. Solo hay goles completos (el resultado no puede ser 2.6 vs 1.2) y la distribución *Poisson* tiene sentido. Para poder definir valores para $\mu$ y $\lambda$ se propone un factor de ataque $\alpha$ y un factor de defensa $\beta$. Estos factores son dinámicos y cambian durante la temporada. En este caso se decido tomar un "moving average" de los goles que logra cada equipo como factor de ataque y los goles que reciben como factor de defensa hasta el día antes del siguiente partido. El factor de defensa se toma negativo. Adicional se propones un factor general $\gamma$ para la el quipo que juega en casa y que juega afuera.

$$
log(\mu_{i, j,t}) = \alpha_{i,t} + \beta_{ j,t} + \gamma_H
$$

$$
log(\lambda_{i, j,t}) = \alpha_{j,t} + \beta_{ i,t} + \gamma_A
$$ Los nuevos valores de $\alpha$ y $\beta$ se calcula con el valor #Moving Average# de cada uno hasta el partido anterior y se supone que tiene una distribución normal. Basado en el paper de Alun Owen se pone a un valor de $\sigma = 0.001$ $$
\alpha_{t} \sim N(\alpha_{t-1}, 0.001)
$$

$$
\beta_{t} \sim N(\beta_{t-1}, 0.001)
$$

Ambas valores de $\gamma$ se define como una distribución $\Gamma$: $$
\gamma_H \sim \Gamma(0.1, 0.01)
$$ $$
\gamma_A \sim \Gamma(0.01, 0.001)
$$

El modelo fue implantado en STAN y R, con 4 cadenas y 5000 iteraciones y un warmup de 2500.

```{stan stan model definition, output.var = "dglm_PL", warning=FALSE, echo=FALSE, cache=TRUE}
data {
  int <lower=0> T; // number of matches
  int <lower=0> N; // number of data points
  int Xi[T, 2]; // Observed counts of goals scored by team i playing at home
  int Yi[T, 2]; // Observed counts of goals scored by team i playing away
  real maH[T];  // Attack abilities for home teams
  real mbH[T];   // Defense abilities for home teams
  real maA[T];  // Attack abilities for away teams
  real mbA[T];   // Defense abilities for away teams

}

parameters {
  real alphaH[T];  // Attack abilities for teams
  real betaH[T];   // Defense abilities for teams
  real alphaA[T];  // Attack abilities for teams
  real betaA[T];   // Defense abilities for teams
  real gamma_H;   // overall average scoring rate at home
  real gamma_A;   // overall average scoring rate away
  
}  
model {
  // Priors for attack and defense abilities
  /*alphaH[1] ~ normal(maH[T], 0.001);
  betaH[1] ~ normal(mbH[T], 0.001);
  alphaA[1] ~ normal(maA[T], 0.001);
  betaA[1] ~ normal(mbA[T], 0.001);*/
  for (i in 1:T){
    alphaH[i] ~ normal(maH[i], 0.001);
    betaH[i] ~ normal(mbH[i], 0.001);
    alphaA[i] ~ normal(maA[i], 0.001);
    betaA[i] ~ normal(mbA[i], 0.001);
  
  }
  gamma_H ~ gamma(0.1, 0.01);
  gamma_A ~ gamma(0.01, 0.001);

  // Constraints for identifiability
  //sum(alpha) == 0;  // Constraint 1
  //sum(beta) == 0;   // Constraint 2
  
  
  // Likelihood for observed counts
     for (i in 1:T) {
      real mu = exp(alphaH[i] + betaH[i] + gamma_H);   // 
      real lambda= exp(alphaA[i] + betaA[i] + gamma_A); // 
      Xi[i, 1] ~ poisson_log(mu);  // Poisson goals at home
      Yi[i, 1] ~ poisson_log(lambda); // Poisson goals away
  }
}
generated quantities {
    real X_pred;  // Predicted number of goals in next home game
    real Y_pred;  // Predicted number of goals in next away game
    real mu_exp = exp(alphaH[T] + betaH[T] + gamma_H);
    real lambda_exp = exp(alphaA[T] + betaA[T] + gamma_A); // 
    X_pred = poisson_rng(mu_exp);
    Y_pred = poisson_rng(lambda_exp);
  }

```

```{r run the stan model, echo=FALSE, warning=FALSE, cache=TRUE}

fit_Ar_ManU <- rstan::sampling(dglm_PL, data = dataPL_E0_stan_Ar_ManU, chains = 4, iter = 5000, refresh=0)

fit_AV_Liv <- rstan::sampling(dglm_PL, data = dataPL_E0_stan_AV_Liv, chains = 4, iter = 5000,  refresh=0)

fit_MC_FH <- rstan::sampling(dglm_PL, data = dataPL_E0_stan_MC_FH, chains = 4, iter = 5000,  refresh=0)

```

Se simula los partidos del penultimo día de la temporada:

-   Manchester United vs. Arsenal, resultado real 0-1

-   Fulham vs. Machnester City: resultado real 0-4

-   Aston Villa vs Liverpool: resultado real 3-3

```{r graphs ManU vs Arsenal, echo=FALSE, warning=FALSE, cache=TRUE}
posterior_data <- extract(fit_Ar_ManU)
df <- data.frame(HomeTeam = posterior_data$X_pred, 
                 AwayTeam = posterior_data$Y_pred)
HomeGoals <- mean(posterior_data$X_pred)
AwayGoals<- mean(posterior_data$Y_pred)
                                  
df_plot <- data.frame(teams = c("Home Team", "Away Team"), 
                      mTeams = c(mean(df$HomeTeam), mean(df$AwayTeam)), 
                      q1 = c(quantile(df$HomeTeam, 0.025), quantile(df$AwayTeam, 0.025)),
                      q2 = c(quantile(df$HomeTeam, 0.975), quantile(df$AwayTeam, 0.975))
                      )
g_ManUArs <- ggplot(df_plot, aes(y=teams, x = mTeams, group = teams)) +
  geom_line()+
  geom_pointrange(aes(xmin = q1, 
                      xmax = q2, colour = c("ManU", "Arsenal") ))

```

```{r graphs  Aston Villa vs Liverpool, echo=FALSE, warning=FALSE, cache=TRUE}
posterior_data <- extract(fit_AV_Liv)
df <- data.frame(HomeTeam = posterior_data$X_pred, 
                 AwayTeam = posterior_data$Y_pred)
HomeGoals <- append(HomeGoals, mean(posterior_data$X_pred))
AwayGoals<- append(AwayGoals, mean(posterior_data$Y_pred))                                
df_plot <- data.frame(teams = c("Home Team", "Away Team"), 
                      mTeams = c(mean(df$HomeTeam), mean(df$AwayTeam)), 
                      q1 = c(quantile(df$HomeTeam, 0.025), quantile(df$AwayTeam, 0.025)),
                      q2 = c(quantile(df$HomeTeam, 0.975), quantile(df$AwayTeam, 0.975))
                      )
g_AVLiv <- ggplot(df_plot, aes(y=teams, x = mTeams, group = teams)) +
  geom_line()+
  geom_pointrange(aes(xmin = q1, 
                      xmax = q2, colour = c("Aston Villa", "Liverpool") ))

```

```{r graphs  Fullham vs Man City, echo=FALSE, warning=FALSE, cache=TRUE}
posterior_data <- extract(fit_MC_FH)

df <- data.frame(HomeTeam = posterior_data$X_pred, 
                 AwayTeam = posterior_data$Y_pred)
HomeGoals <- append(HomeGoals, mean(posterior_data$X_pred))
AwayGoals<- append(AwayGoals, mean(posterior_data$Y_pred)) 
                                  
df_plot <- data.frame(teams = c("Home Team", "Away Team"), 
                      mTeams = c(mean(df$HomeTeam), mean(df$AwayTeam)), 
                      q1 = c(quantile(df$HomeTeam, 0.025), quantile(df$AwayTeam, 0.025)),
                      q2 = c(quantile(df$HomeTeam, 0.975), quantile(df$AwayTeam, 0.975))
                      )
g_FHManCity <- ggplot(df_plot, aes(y=teams, x = mTeams, group = teams)) +
  geom_line()+
  geom_pointrange(aes(xmin = q1, 
                      xmax = q2, colour = c("Fullham", "Man City") ))



```

```{r gt print, warning=FALSE, echo=FALSE, cache=TRUE}
# plots
g_ManUArs
g_AVLiv 
g_FHManCity


Home <- c("ManU", "Aston Villa", "Fullham")
Away <- c("Arsenal", "Liverpool", "ManCity")

gt_print <- data.frame(Home, Away, HomeGoals, AwayGoals) |> gt() |> fmt_number(decimals = 1)
gt_print
```

\newpage

# Resultados

El modelo predice muy optimista los resultados con muchos goles de ambos lados. Es puede tener varios razones:

1.  La manera de estimar las habilidades de defender no es la adequada y salen muy bajos en el modelo. No se considero que la suma de todos las habildiades de defender (y ataquar) debe de ser 0, como se propone en el paper de Alun Owen.

2.  Otra razon puede ser que se toma en cuenta todos los goles de todos los partidos para calcular las habilidades de ataquar y defender. Una posible mejora podria ser implementar un filtro que solo toma en cuenta los resultados de unos ultimos días de juegos, por ejemple 5 días y adicionalmente con un peso mas fuerte a los ultimos.

3.  Para las ligas europeas, como la Premier League, hay muchas informaciónes adicionales, como el numer de esquinas, tiros, tiros a la porteria, tiros que toquen la portería, etc. No se tomo en cuenta esa información debido a que la intención es ajustar el modelo a la LigaMX en un futuro. Por lo general, esa información está disponible.

4.  Se podria pensar en un factor addicional que refleja si el equipo está competiendo en otra competencia nacional o internacional ya que eso puede afectar al cansacio de los equipos conforme avanza la termporada.

# Conclusiones

El modelo dinamico predice los resultados muy optimista para la Premier League. Debido a que no se toma en cuenta varios factores como se menciona en le capitulo de los resultados. Para trabajos futuros se puede pensar a implementar las comentarios mencionados. Adicionalmente será util implementar que el modelo predice para cada día de juego los partidos automatizado. Por el momento hay que definir los partidos manualmente lo que puede llevar a errores a momento de definirlos.

\newpage

# Referencias

-   Alun Owen (2009). "Dynamic Bayesian forecasting models of football match outcomes with estimation of the evolution variance parameter", Mathematics Education Centre, Loughborough University, Loughborough, Leicestershire LE11 3TU, UK
